---
# This playbook install the base config app

- name: "({{ app_name }}) rename volume:primary"
  tags:
    - splunk
    - splunk_baseconfig
    - org_indexer_volume_indexes
  replace:
    path: "{{ app_path }}/{{ app_dest_name }}/local/indexes.conf"
    regexp: '^\[volume:primary\]'
    replace: "[volume:{{ splunk_volume_defaults['homePath']|default('primary') }}]"
  when: splunk_indexer_volumes is defined

- name: "({{ app_name }}) setting volume path"
  tags:
    - splunk
    - splunk_baseconfig
    - org_indexer_volume_indexes
  set_fact:
    splunk_indexer_volumes: "{{ splunk_indexer_volumes|default(dict({'primary':{}})) | combine( { volume_name: {'path': volume_vars.path|default(splunk_home+'/var/lib/splunk')} }, recursive=True) }}"
  with_dict: "{{ splunk_indexer_volumes|default(dict({'primary':{}})) }}"
  vars:
    volume_name: "{{ item.key }}"
    volume_vars: "{{ item.value }}"
  when: splunk_indexer_volumes is defined

- name: "({{ app_name }}) get volume file system available size"
  tags:
    - splunk
    - splunk_baseconfig
    - org_indexer_volume_indexes
  shell: "df --block-size=M --output=size {{ volume_vars['path']|default(splunk_home+'/var/lib/splunk') }} | tail -1 | tr -d 'M'"
  check_mode: no
  changed_when: false
  register: volume_fs_avail
  become: yes
  become_user: "{{splunk_user}}"
  with_dict: "{{ splunk_indexer_volumes|default(dict({'primary':{}})) }}"
  vars:
    volume_name: "{{ item.key }}"
    volume_vars: "{{ item.value }}"
  delegate_to: "{{ splunk_idxc_indexer_list|default([])|union(splunk_indexer_list|default([]))|first }}"
  when: splunk_volume_defaults.VolumeDataSize_Free_MB is defined

- name: "({{ app_name }}) calculate maxVolumeDataSizeMB"
  tags:
    - splunk
    - splunk_baseconfig
    - org_indexer_volume_indexes
  set_fact:
    splunk_indexer_volumes_tmp: >-
      {%- set res = splunk_indexer_volumes -%}
      {%- for volume in volume_fs_avail.results -%}
        {%- if splunk_indexer_volumes[volume.item.key]['maxVolumeDataSizeMB'] is not defined -%}
          {%- set _ = res[volume.item.key].update({'maxVolumeDataSizeMB': (volume.stdout|int - splunk_volume_defaults.VolumeDataSize_Free_MB|default(800)|int)}) -%}
        {%- endif -%}
      {%- endfor -%}
      {{ res }}
  when: splunk_volume_defaults.VolumeDataSize_Free_MB is defined

- name: "({{ app_name }}) set indexer volume variables"
  tags:
    - splunk
    - splunk_baseconfig
    - org_indexer_volume_indexes
  include_tasks: set_indexer_volume_vars.yml
  with_dict: "{{ splunk_indexer_volumes_tmp|default(splunk_indexer_volumes) }}"
  vars:
    volume_name: "{{ item.key }}"
    volume_vars: "{{ item.value }}"
  when: splunk_indexer_volumes is defined

- name: "({{ app_name }}) setting volume:primary"
  tags:
    - splunk
    - splunk_baseconfig
    - org_indexer_volume_indexes
  ini_file:
    path: "{{ app_path }}/{{ app_dest_name }}/local/indexes.conf"
    section: volume:primary
    option: path
    value: "{{splunk_home}}/var/lib/splunk"
    owner: "{{splunk_user}}"
    group: "{{splunk_group}}"
    mode: 0644
  notify: restart splunk
  when: splunk_indexer_volumes is not defined
